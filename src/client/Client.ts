/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "http://webapistrahovanie.it-trends.net";
  }

  account_Registration(model: UserRegistrationRequest): Observable<FileResponse> {
    let url_ = this.baseUrl + "/api/v1-web/Account/Registration/Registration";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/octet-stream"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAccount_Registration(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAccount_Registration(<any>response_);
        } catch (e) {
          return <Observable<FileResponse>><any>_observableThrow(e);
        }
      } else
        return <Observable<FileResponse>><any>_observableThrow(response_);
    }));
  }

  protected processAccount_Registration(response: HttpResponseBase): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FileResponse>(<any>null);
  }

  account_SignIn(model: SignInRequest): Observable<SignInVm> {
    let url_ = this.baseUrl + "/api/v1-web/Account/SignIn/SignIn";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAccount_SignIn(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAccount_SignIn(<any>response_);
        } catch (e) {
          return <Observable<SignInVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<SignInVm>><any>_observableThrow(response_);
    }));
  }

  protected processAccount_SignIn(response: HttpResponseBase): Observable<SignInVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SignInVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<SignInVm>(<any>null);
  }

  account_RestorePassword(command: RestorePasswordCommand): Observable<FileResponse> {
    let url_ = this.baseUrl + "/api/v1-web/Account/RestorePassword/RestorePassword";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(command);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/octet-stream"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAccount_RestorePassword(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAccount_RestorePassword(<any>response_);
        } catch (e) {
          return <Observable<FileResponse>><any>_observableThrow(e);
        }
      } else
        return <Observable<FileResponse>><any>_observableThrow(response_);
    }));
  }

  protected processAccount_RestorePassword(response: HttpResponseBase): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FileResponse>(<any>null);
  }

  account_RefreshToken(command: RefreshTokenCommand): Observable<SignInVm> {
    let url_ = this.baseUrl + "/api/v1-web/Account/RefreshToken/RefreshToken";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(command);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAccount_RefreshToken(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAccount_RefreshToken(<any>response_);
        } catch (e) {
          return <Observable<SignInVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<SignInVm>><any>_observableThrow(response_);
    }));
  }

  protected processAccount_RefreshToken(response: HttpResponseBase): Observable<SignInVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SignInVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<SignInVm>(<any>null);
  }

  account_Logout(command: LogoutCommand): Observable<FileResponse> {
    let url_ = this.baseUrl + "/api/v1-web/Account/Logout/Logout";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(command);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/octet-stream"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAccount_Logout(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAccount_Logout(<any>response_);
        } catch (e) {
          return <Observable<FileResponse>><any>_observableThrow(e);
        }
      } else
        return <Observable<FileResponse>><any>_observableThrow(response_);
    }));
  }

  protected processAccount_Logout(response: HttpResponseBase): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FileResponse>(<any>null);
  }

  calculator_GetCostByType(type: CalculatorType | undefined, key: string | null | undefined, values: CalcSelectValue[] | null | undefined): Observable<CostVm> {
    let url_ = this.baseUrl + "/api/v1-web/Calculator/GetCostByType?";
    if (type === null)
      throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined)
      url_ += "Type=" + encodeURIComponent("" + type) + "&";
    if (key !== undefined && key !== null)
      url_ += "Key=" + encodeURIComponent("" + key) + "&";
    if (values !== undefined && values !== null)
      values && values.forEach((item, index) => {
        for (let attr in item)
          if (item.hasOwnProperty(attr)) {
            url_ += "Values[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
          }
      });
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCalculator_GetCostByType(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCalculator_GetCostByType(<any>response_);
        } catch (e) {
          return <Observable<CostVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<CostVm>><any>_observableThrow(response_);
    }));
  }

  protected processCalculator_GetCostByType(response: HttpResponseBase): Observable<CostVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CostVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<CostVm>(<any>null);
  }

  calculator_GetCalcualtorsByType(): Observable<ListRequestEnumVm> {
    let url_ = this.baseUrl + "/api/v1-web/Calculator/GetCalcualtorsByType";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCalculator_GetCalcualtorsByType(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCalculator_GetCalcualtorsByType(<any>response_);
        } catch (e) {
          return <Observable<ListRequestEnumVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<ListRequestEnumVm>><any>_observableThrow(response_);
    }));
  }

  protected processCalculator_GetCalcualtorsByType(response: HttpResponseBase): Observable<ListRequestEnumVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ListRequestEnumVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<ListRequestEnumVm>(<any>null);
  }

  calculator_GetCalcParamByType(key: string | null | undefined, type: CalculatorType | undefined): Observable<Osago> {
    let url_ = this.baseUrl + "/api/v1-web/Calculator/GetCalcParamByType?";
    if (key !== undefined && key !== null)
      url_ += "Key=" + encodeURIComponent("" + key) + "&";
    if (type === null)
      throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined)
      url_ += "Type=" + encodeURIComponent("" + type) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCalculator_GetCalcParamByType(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCalculator_GetCalcParamByType(<any>response_);
        } catch (e) {
          return <Observable<Osago>><any>_observableThrow(e);
        }
      } else
        return <Observable<Osago>><any>_observableThrow(response_);
    }));
  }

  protected processCalculator_GetCalcParamByType(response: HttpResponseBase): Observable<Osago> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Osago.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<Osago>(<any>null);
  }

  driver_GetPagesByList(): Observable<PagesVm> {
    let url_ = this.baseUrl + "/api/v1-web/Driver/GetPagesByList";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processDriver_GetPagesByList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDriver_GetPagesByList(<any>response_);
        } catch (e) {
          return <Observable<PagesVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<PagesVm>><any>_observableThrow(response_);
    }));
  }

  protected processDriver_GetPagesByList(response: HttpResponseBase): Observable<PagesVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PagesVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<PagesVm>(<any>null);
  }

  driver_GetPageByKey(stringKey: string | null | undefined): Observable<PageVm> {
    let url_ = this.baseUrl + "/api/v1-web/Driver/GetPageByKey?";
    if (stringKey !== undefined && stringKey !== null)
      url_ += "StringKey=" + encodeURIComponent("" + stringKey) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processDriver_GetPageByKey(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDriver_GetPageByKey(<any>response_);
        } catch (e) {
          return <Observable<PageVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<PageVm>><any>_observableThrow(response_);
    }));
  }

  protected processDriver_GetPageByKey(response: HttpResponseBase): Observable<PageVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PageVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<PageVm>(<any>null);
  }

  menu_GetDealersByList(): Observable<DealersVm> {
    let url_ = this.baseUrl + "/api/v1-web/Menu/GetDealersByList";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMenu_GetDealersByList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMenu_GetDealersByList(<any>response_);
        } catch (e) {
          return <Observable<DealersVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<DealersVm>><any>_observableThrow(response_);
    }));
  }

  protected processMenu_GetDealersByList(response: HttpResponseBase): Observable<DealersVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DealersVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<DealersVm>(<any>null);
  }

  menu_GetDealerByKey(stringKey: string | null | undefined): Observable<DealerVm> {
    let url_ = this.baseUrl + "/api/v1-web/Menu/GetDealerByKey?";
    if (stringKey !== undefined && stringKey !== null)
      url_ += "StringKey=" + encodeURIComponent("" + stringKey) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMenu_GetDealerByKey(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMenu_GetDealerByKey(<any>response_);
        } catch (e) {
          return <Observable<DealerVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<DealerVm>><any>_observableThrow(response_);
    }));
  }

  protected processMenu_GetDealerByKey(response: HttpResponseBase): Observable<DealerVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DealerVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<DealerVm>(<any>null);
  }

  page_GetPagesByList(): Observable<PagesVm> {
    let url_ = this.baseUrl + "/api/v1-web/Page/GetPagesByList";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processPage_GetPagesByList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processPage_GetPagesByList(<any>response_);
        } catch (e) {
          return <Observable<PagesVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<PagesVm>><any>_observableThrow(response_);
    }));
  }

  protected processPage_GetPagesByList(response: HttpResponseBase): Observable<PagesVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PagesVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<PagesVm>(<any>null);
  }

  page_GetPageByKey(stringKey: string | null | undefined): Observable<PageVm> {
    let url_ = this.baseUrl + "/api/v1-web/Page/GetPageByKey?";
    if (stringKey !== undefined && stringKey !== null)
      url_ += "StringKey=" + encodeURIComponent("" + stringKey) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processPage_GetPageByKey(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processPage_GetPageByKey(<any>response_);
        } catch (e) {
          return <Observable<PageVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<PageVm>><any>_observableThrow(response_);
    }));
  }

  protected processPage_GetPageByKey(response: HttpResponseBase): Observable<PageVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PageVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<PageVm>(<any>null);
  }

  user_Create(command: RegistrationCommand): Observable<FileResponse> {
    let url_ = this.baseUrl + "/api/v1-web/User/Create/Create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(command);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/octet-stream"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUser_Create(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUser_Create(<any>response_);
        } catch (e) {
          return <Observable<FileResponse>><any>_observableThrow(e);
        }
      } else
        return <Observable<FileResponse>><any>_observableThrow(response_);
    }));
  }

  protected processUser_Create(response: HttpResponseBase): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FileResponse>(<any>null);
  }

  vehicle_GetVehiclesByList(): Observable<PagesVm> {
    let url_ = this.baseUrl + "/api/v1-web/Vehicle/GetVehiclesByList";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processVehicle_GetVehiclesByList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processVehicle_GetVehiclesByList(<any>response_);
        } catch (e) {
          return <Observable<PagesVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<PagesVm>><any>_observableThrow(response_);
    }));
  }

  protected processVehicle_GetVehiclesByList(response: HttpResponseBase): Observable<PagesVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PagesVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<PagesVm>(<any>null);
  }

  vehicle_GetVehicleById(stringKey: string | null | undefined): Observable<PageVm> {
    let url_ = this.baseUrl + "/api/v1-web/Vehicle/GetVehicleById?";
    if (stringKey !== undefined && stringKey !== null)
      url_ += "StringKey=" + encodeURIComponent("" + stringKey) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processVehicle_GetVehicleById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processVehicle_GetVehicleById(<any>response_);
        } catch (e) {
          return <Observable<PageVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<PageVm>><any>_observableThrow(response_);
    }));
  }

  protected processVehicle_GetVehicleById(response: HttpResponseBase): Observable<PageVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PageVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<PageVm>(<any>null);
  }

  config_GenerateConfig(): Observable<FileResponse> {
    let url_ = this.baseUrl + "/api/v1-web/Config/GenerateConfig/GenerateConfig";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/octet-stream"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processConfig_GenerateConfig(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processConfig_GenerateConfig(<any>response_);
        } catch (e) {
          return <Observable<FileResponse>><any>_observableThrow(e);
        }
      } else
        return <Observable<FileResponse>><any>_observableThrow(response_);
    }));
  }

  protected processConfig_GenerateConfig(response: HttpResponseBase): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FileResponse>(<any>null);
  }
}

export class UserRegistrationRequest implements IUserRegistrationRequest {
  firstName!: string;
  lastName!: string;
  patronymic!: string;
  phoneNumber!: string;
  email!: string;
  password!: string;
  organizationId!: number;
  cityId!: number;
  uploadId!: number;

  constructor(data?: IUserRegistrationRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.firstName = _data["firstName"];
      this.lastName = _data["lastName"];
      this.patronymic = _data["patronymic"];
      this.phoneNumber = _data["phoneNumber"];
      this.email = _data["email"];
      this.password = _data["password"];
      this.organizationId = _data["organizationId"];
      this.cityId = _data["cityId"];
      this.uploadId = _data["uploadId"];
    }
  }

  static fromJS(data: any): UserRegistrationRequest {
    data = typeof data === 'object' ? data : {};
    let result = new UserRegistrationRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["firstName"] = this.firstName;
    data["lastName"] = this.lastName;
    data["patronymic"] = this.patronymic;
    data["phoneNumber"] = this.phoneNumber;
    data["email"] = this.email;
    data["password"] = this.password;
    data["organizationId"] = this.organizationId;
    data["cityId"] = this.cityId;
    data["uploadId"] = this.uploadId;
    return data;
  }

  clone(): UserRegistrationRequest {
    const json = this.toJSON();
    let result = new UserRegistrationRequest();
    result.init(json);
    return result;
  }
}

export interface IUserRegistrationRequest {
  firstName: string;
  lastName: string;
  patronymic: string;
  phoneNumber: string;
  email: string;
  password: string;
  organizationId: number;
  cityId: number;
  uploadId: number;
}

export class SignInVm implements ISignInVm {
  accessToken!: AccessToken;
  refreshToken!: string;

  constructor(data?: ISignInVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.accessToken = _data["accessToken"] ? AccessToken.fromJS(_data["accessToken"]) : <any>undefined;
      this.refreshToken = _data["refreshToken"];
    }
  }

  static fromJS(data: any): SignInVm {
    data = typeof data === 'object' ? data : {};
    let result = new SignInVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["accessToken"] = this.accessToken ? this.accessToken.toJSON() : <any>undefined;
    data["refreshToken"] = this.refreshToken;
    return data;
  }

  clone(): SignInVm {
    const json = this.toJSON();
    let result = new SignInVm();
    result.init(json);
    return result;
  }
}

export interface ISignInVm {
  accessToken: AccessToken;
  refreshToken: string;
}

export class AccessToken implements IAccessToken {
  token!: string;
  expiresIn!: number;

  constructor(data?: IAccessToken) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.token = _data["token"];
      this.expiresIn = _data["expiresIn"];
    }
  }

  static fromJS(data: any): AccessToken {
    data = typeof data === 'object' ? data : {};
    let result = new AccessToken();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["token"] = this.token;
    data["expiresIn"] = this.expiresIn;
    return data;
  }

  clone(): AccessToken {
    const json = this.toJSON();
    let result = new AccessToken();
    result.init(json);
    return result;
  }
}

export interface IAccessToken {
  token: string;
  expiresIn: number;
}

export class SignInRequest implements ISignInRequest {
  login!: string;
  password!: string;

  constructor(data?: ISignInRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.login = _data["login"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): SignInRequest {
    data = typeof data === 'object' ? data : {};
    let result = new SignInRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["login"] = this.login;
    data["password"] = this.password;
    return data;
  }

  clone(): SignInRequest {
    const json = this.toJSON();
    let result = new SignInRequest();
    result.init(json);
    return result;
  }
}

export interface ISignInRequest {
  login: string;
  password: string;
}

export class RestorePasswordCommand implements IRestorePasswordCommand {
  login!: string;

  constructor(data?: IRestorePasswordCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.login = _data["login"];
    }
  }

  static fromJS(data: any): RestorePasswordCommand {
    data = typeof data === 'object' ? data : {};
    let result = new RestorePasswordCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["login"] = this.login;
    return data;
  }

  clone(): RestorePasswordCommand {
    const json = this.toJSON();
    let result = new RestorePasswordCommand();
    result.init(json);
    return result;
  }
}

export interface IRestorePasswordCommand {
  login: string;
}

export class RefreshTokenCommand implements IRefreshTokenCommand {
  accessToken!: string;
  refreshToken!: string;

  constructor(data?: IRefreshTokenCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.accessToken = _data["accessToken"];
      this.refreshToken = _data["refreshToken"];
    }
  }

  static fromJS(data: any): RefreshTokenCommand {
    data = typeof data === 'object' ? data : {};
    let result = new RefreshTokenCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["accessToken"] = this.accessToken;
    data["refreshToken"] = this.refreshToken;
    return data;
  }

  clone(): RefreshTokenCommand {
    const json = this.toJSON();
    let result = new RefreshTokenCommand();
    result.init(json);
    return result;
  }
}

export interface IRefreshTokenCommand {
  accessToken: string;
  refreshToken: string;
}

export class LogoutCommand implements ILogoutCommand {
  refreshToken!: string;

  constructor(data?: ILogoutCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.refreshToken = _data["refreshToken"];
    }
  }

  static fromJS(data: any): LogoutCommand {
    data = typeof data === 'object' ? data : {};
    let result = new LogoutCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["refreshToken"] = this.refreshToken;
    return data;
  }

  clone(): LogoutCommand {
    const json = this.toJSON();
    let result = new LogoutCommand();
    result.init(json);
    return result;
  }
}

export interface ILogoutCommand {
  refreshToken: string;
}

export class CostVm implements ICostVm {
  cost!: number;
  costSale!: number;

  constructor(data?: ICostVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.cost = _data["cost"];
      this.costSale = _data["costSale"];
    }
  }

  static fromJS(data: any): CostVm {
    data = typeof data === 'object' ? data : {};
    let result = new CostVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["cost"] = this.cost;
    data["costSale"] = this.costSale;
    return data;
  }

  clone(): CostVm {
    const json = this.toJSON();
    let result = new CostVm();
    result.init(json);
    return result;
  }
}

export interface ICostVm {
  cost: number;
  costSale: number;
}

export enum CalculatorType {
  OsagoPmr = 0,
  OsagoMd = 1,
  GreenCard = 2,
  OsagoUa = 3,
  Kasko = 4,
}

export class CalcSelectValue implements ICalcSelectValue {
  key!: string;
  value!: number;
  subValue?: number | undefined;

  constructor(data?: ICalcSelectValue) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.key = _data["key"];
      this.value = _data["value"];
      this.subValue = _data["subValue"];
    }
  }

  static fromJS(data: any): CalcSelectValue {
    data = typeof data === 'object' ? data : {};
    let result = new CalcSelectValue();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["key"] = this.key;
    data["value"] = this.value;
    data["subValue"] = this.subValue;
    return data;
  }

  clone(): CalcSelectValue {
    const json = this.toJSON();
    let result = new CalcSelectValue();
    result.init(json);
    return result;
  }
}

export interface ICalcSelectValue {
  key: string;
  value: number;
  subValue?: number | undefined;
}

export class ListRequestEnumVm implements IListRequestEnumVm {
  requestEnums!: RequestEnumVm[];

  constructor(data?: IListRequestEnumVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["requestEnums"])) {
        this.requestEnums = [] as any;
        for (let item of _data["requestEnums"])
          this.requestEnums!.push(RequestEnumVm.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ListRequestEnumVm {
    data = typeof data === 'object' ? data : {};
    let result = new ListRequestEnumVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.requestEnums)) {
      data["requestEnums"] = [];
      for (let item of this.requestEnums)
        data["requestEnums"].push(item.toJSON());
    }
    return data;
  }

  clone(): ListRequestEnumVm {
    const json = this.toJSON();
    let result = new ListRequestEnumVm();
    result.init(json);
    return result;
  }
}

export interface IListRequestEnumVm {
  requestEnums: RequestEnumVm[];
}

export class RequestEnumVm implements IRequestEnumVm {
  name!: string | undefined;
  value!: string | undefined;

  constructor(data?: IRequestEnumVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.value = _data["value"];
    }
  }

  static fromJS(data: any): RequestEnumVm {
    data = typeof data === 'object' ? data : {};
    let result = new RequestEnumVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    data["value"] = this.value;
    return data;
  }

  clone(): RequestEnumVm {
    const json = this.toJSON();
    let result = new RequestEnumVm();
    result.init(json);
    return result;
  }
}

export interface IRequestEnumVm {
  name: string | undefined;
  value: string | undefined;
}

export class Osago implements IOsago {
  name!: string;
  options!: ConfigObject[];
  key!: string;

  constructor(data?: IOsago) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      if (Array.isArray(_data["options"])) {
        this.options = [] as any;
        for (let item of _data["options"])
          this.options!.push(ConfigObject.fromJS(item));
      }
      this.key = _data["key"];
    }
  }

  static fromJS(data: any): Osago {
    data = typeof data === 'object' ? data : {};
    let result = new Osago();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    if (Array.isArray(this.options)) {
      data["options"] = [];
      for (let item of this.options)
        data["options"].push(item.toJSON());
    }
    data["key"] = this.key;
    return data;
  }

  clone(): Osago {
    const json = this.toJSON();
    let result = new Osago();
    result.init(json);
    return result;
  }
}

export interface IOsago {
  name: string;
  options: ConfigObject[];
  key: string;
}

export class ConfigObject implements IConfigObject {
  name!: string;
  help!: string;
  visibleType!: VisibleType;
  options!: ConfigObjectOption[];
  key!: string;
  order!: number;
  parentDisableId!: number;
  parentDisableKey!: string;

  constructor(data?: IConfigObject) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.help = _data["help"];
      this.visibleType = _data["visibleType"];
      if (Array.isArray(_data["options"])) {
        this.options = [] as any;
        for (let item of _data["options"])
          this.options!.push(ConfigObjectOption.fromJS(item));
      }
      this.key = _data["key"];
      this.order = _data["order"];
      this.parentDisableId = _data["parentDisableId"];
      this.parentDisableKey = _data["parentDisableKey"];
    }
  }

  static fromJS(data: any): ConfigObject {
    data = typeof data === 'object' ? data : {};
    let result = new ConfigObject();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    data["help"] = this.help;
    data["visibleType"] = this.visibleType;
    if (Array.isArray(this.options)) {
      data["options"] = [];
      for (let item of this.options)
        data["options"].push(item.toJSON());
    }
    data["key"] = this.key;
    data["order"] = this.order;
    data["parentDisableId"] = this.parentDisableId;
    data["parentDisableKey"] = this.parentDisableKey;
    return data;
  }

  clone(): ConfigObject {
    const json = this.toJSON();
    let result = new ConfigObject();
    result.init(json);
    return result;
  }
}

export interface IConfigObject {
  name: string;
  help: string;
  visibleType: VisibleType;
  options: ConfigObjectOption[];
  key: string;
  order: number;
  parentDisableId: number;
  parentDisableKey: string;
}

export enum VisibleType {
  Select = 0,
  Radio = 1,
  Slider = 2,
}

export class ConfigObjectOption implements IConfigObjectOption {
  id!: number;
  name!: string;
  img!: string;
  subOptions!: ConfigSubOption[];

  constructor(data?: IConfigObjectOption) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.img = _data["img"];
      if (Array.isArray(_data["subOptions"])) {
        this.subOptions = [] as any;
        for (let item of _data["subOptions"])
          this.subOptions!.push(ConfigSubOption.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ConfigObjectOption {
    data = typeof data === 'object' ? data : {};
    let result = new ConfigObjectOption();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["img"] = this.img;
    if (Array.isArray(this.subOptions)) {
      data["subOptions"] = [];
      for (let item of this.subOptions)
        data["subOptions"].push(item.toJSON());
    }
    return data;
  }

  clone(): ConfigObjectOption {
    const json = this.toJSON();
    let result = new ConfigObjectOption();
    result.init(json);
    return result;
  }
}

export interface IConfigObjectOption {
  id: number;
  name: string;
  img: string;
  subOptions: ConfigSubOption[];
}

export class ConfigSubOption implements IConfigSubOption {
  id!: number;
  name!: string;

  constructor(data?: IConfigSubOption) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): ConfigSubOption {
    data = typeof data === 'object' ? data : {};
    let result = new ConfigSubOption();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    return data;
  }

  clone(): ConfigSubOption {
    const json = this.toJSON();
    let result = new ConfigSubOption();
    result.init(json);
    return result;
  }
}

export interface IConfigSubOption {
  id: number;
  name: string;
}

export class PagesVm implements IPagesVm {
  pages!: PageDto[];

  constructor(data?: IPagesVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["pages"])) {
        this.pages = [] as any;
        for (let item of _data["pages"])
          this.pages!.push(PageDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagesVm {
    data = typeof data === 'object' ? data : {};
    let result = new PagesVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.pages)) {
      data["pages"] = [];
      for (let item of this.pages)
        data["pages"].push(item.toJSON());
    }
    return data;
  }

  clone(): PagesVm {
    const json = this.toJSON();
    let result = new PagesVm();
    result.init(json);
    return result;
  }
}

export interface IPagesVm {
  pages: PageDto[];
}

export class PageDto implements IPageDto {
  id!: number;
  name!: string;
  description!: string;
  stringKey!: string;

  constructor(data?: IPageDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.stringKey = _data["stringKey"];
    }
  }

  static fromJS(data: any): PageDto {
    data = typeof data === 'object' ? data : {};
    let result = new PageDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["description"] = this.description;
    data["stringKey"] = this.stringKey;
    return data;
  }

  clone(): PageDto {
    const json = this.toJSON();
    let result = new PageDto();
    result.init(json);
    return result;
  }
}

export interface IPageDto {
  id: number;
  name: string;
  description: string;
  stringKey: string;
}

export class PageVm implements IPageVm {
  id!: number;
  name!: string;
  description!: string;
  stringKey!: string;

  constructor(data?: IPageVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.stringKey = _data["stringKey"];
    }
  }

  static fromJS(data: any): PageVm {
    data = typeof data === 'object' ? data : {};
    let result = new PageVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["description"] = this.description;
    data["stringKey"] = this.stringKey;
    return data;
  }

  clone(): PageVm {
    const json = this.toJSON();
    let result = new PageVm();
    result.init(json);
    return result;
  }
}

export interface IPageVm {
  id: number;
  name: string;
  description: string;
  stringKey: string;
}

export class DealersVm implements IDealersVm {
  dealers!: DealerDto[];

  constructor(data?: IDealersVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["dealers"])) {
        this.dealers = [] as any;
        for (let item of _data["dealers"])
          this.dealers!.push(DealerDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): DealersVm {
    data = typeof data === 'object' ? data : {};
    let result = new DealersVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.dealers)) {
      data["dealers"] = [];
      for (let item of this.dealers)
        data["dealers"].push(item.toJSON());
    }
    return data;
  }

  clone(): DealersVm {
    const json = this.toJSON();
    let result = new DealersVm();
    result.init(json);
    return result;
  }
}

export interface IDealersVm {
  dealers: DealerDto[];
}

export class DealerDto implements IDealerDto {
  id!: number;
  name!: string;
  description!: string;

  constructor(data?: IDealerDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.description = _data["description"];
    }
  }

  static fromJS(data: any): DealerDto {
    data = typeof data === 'object' ? data : {};
    let result = new DealerDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["description"] = this.description;
    return data;
  }

  clone(): DealerDto {
    const json = this.toJSON();
    let result = new DealerDto();
    result.init(json);
    return result;
  }
}

export interface IDealerDto {
  id: number;
  name: string;
  description: string;
}

export class DealerVm implements IDealerVm {
  id!: number;
  name!: string;
  description!: string;

  constructor(data?: IDealerVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.description = _data["description"];
    }
  }

  static fromJS(data: any): DealerVm {
    data = typeof data === 'object' ? data : {};
    let result = new DealerVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["description"] = this.description;
    return data;
  }

  clone(): DealerVm {
    const json = this.toJSON();
    let result = new DealerVm();
    result.init(json);
    return result;
  }
}

export interface IDealerVm {
  id: number;
  name: string;
  description: string;
}

export class RegistrationCommand extends UserRegistrationRequest implements IRegistrationCommand {
  roles!: Roles;

  constructor(data?: IRegistrationCommand) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.roles = _data["roles"];
    }
  }

  static fromJS(data: any): RegistrationCommand {
    data = typeof data === 'object' ? data : {};
    let result = new RegistrationCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["roles"] = this.roles;
    super.toJSON(data);
    return data;
  }

  clone(): RegistrationCommand {
    const json = this.toJSON();
    let result = new RegistrationCommand();
    result.init(json);
    return result;
  }
}

export interface IRegistrationCommand extends IUserRegistrationRequest {
  roles: Roles;
}

export enum Roles {
  User = 0,
  Manager = 1,
  Admin = 2,
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((<any>event.target).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
